import java_cup.runtime.*;
import java.util.LinkedList;
import ru.spbau.mit.dbmsau.syntax.ast.*;
import ru.spbau.mit.dbmsau.syntax.exception.SyntaxFatalError;

parser code {: 
    
    LinkedList< String > errors;

    public LinkedList< String > getErrors() {
        return errors;
    }
    
    protected int error_sync_size() {
        return 20;
    }

    public void report_error(String message, Object info) {
        errors.add(message);
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        throw new SyntaxFatalError(message);
    }
    
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at: " + cur_token.value.toString(), null);
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_fatal_error("Couldn't repair and continue parse", null);
    }
    
:};

init with {: 
    errors = new LinkedList<>();
:};

terminal TerminalNode QUIT;
terminal TerminalNode CREATE,TABLE,INSERT,INTO,VALUES,SELECT,FROM;
terminal TerminalNode LEFTPAR,RIGHTPAR,LEFTBRACKET,RIGHTBRACKET;
terminal TerminalNode OR,DIV,MOD,AND,MAIN,COMMA,EQUALS,COLON,NOT,NOTEQUAL,LESS,LESSOREQUAL,MORE,MOREOREQUAL,PLUS,MINUS,ASTERISK,DIVIDE,DOT;
terminal TerminalNode INTEGER_LITERAL;
terminal TerminalNode STRING_LITERAL, IDENT;
terminal TerminalNode DOUBLE_LITERAL;

non terminal ASTNode                      command;
non terminal ASTNode                      statement;

non terminal LinkedList< TerminalNode >   idents_list;
non terminal LinkedList< TerminalNode >   values_list;
non terminal TerminalNode                 value;

non terminal InsertStatementNode          insert_statement;
non terminal LinkedList< TerminalNode >   columns_list;

non terminal SelectStatementNode          select_statement;

non terminal CreateTableStatementNode     create_table_statement;
non terminal LinkedList< ColumnDescriptionNode > columns_descriptions_list;
non terminal ColumnDescriptionNode        column_description;
non terminal TypeDescriptionNode          type_description;

non terminal TerminalNode                 empty;

precedence left PLUS, MINUS;
precedence left DIV, ASTERISK, DIVIDE, MOD, AND;
precedence left EQUALS,NOTEQUAL,LESS,LESSOREQUAL,MORE,MOREOREQUAL, OR;

start with command;

command ::= statement:e1 {: RESULT = e1; parser.done_parsing(); :} | empty {: RESULT = null; parser.done_parsing(); :};

statement ::= create_table_statement:e1 {: RESULT = e1; :}
             |
              insert_statement:e1 {: RESULT = e1; :}
             |
              select_statement:e1 {: RESULT = e1; :}
             |
              QUIT:e1 {: RESULT = null; :}
             ;

select_statement ::= SELECT ASTERISK FROM IDENT:tableFrom
                    {: RESULT = new SelectStatementNode(tableFrom); :}
                  ;

insert_statement ::= INSERT INTO IDENT:tableName LEFTPAR columns_list:cList RIGHTPAR VALUES
                           LEFTPAR:e3 values_list:vList RIGHTPAR:e5
                        {: RESULT = new InsertStatementNode(tableName, cList, vList); :}
                    ;

columns_list ::= idents_list:e1 {: RESULT = e1; :};

idents_list ::= IDENT:e1
                 {: RESULT = new LinkedList<>(); RESULT.add(e1); :}
                 |
                 IDENT:e1 COMMA:e2 idents_list:e3
                 {: RESULT = e3; RESULT.addFirst(e1); :}
                 ;

values_list ::= value:e1
                 {: RESULT = new LinkedList<>(); RESULT.add(e1); :}
                 |
                value:e1 COMMA:e2 values_list:e3
                 {: RESULT = e3; RESULT.addFirst(e1); :}
                 ;

value       ::= INTEGER_LITERAL:e1 {: RESULT = e1; :}
                 |
                DOUBLE_LITERAL:e1 {: RESULT = e1; :}
                 |
                STRING_LITERAL:e1 {: RESULT = e1; :}
                ;

create_table_statement ::= CREATE:e1 TABLE:e2 IDENT:tableName LEFTPAR:e3 columns_descriptions_list:fdescList RIGHTPAR:e5
                       {: RESULT = new CreateTableStatementNode(tableName, fdescList); :}
                       ;

columns_descriptions_list ::= column_description:e1
                             {: RESULT = new LinkedList<>(); RESULT.add(e1); :}
                             |
                             column_description:e1 COMMA:e2 columns_descriptions_list:e3
                             {: RESULT = e3; RESULT.addFirst(e1); :}
                             ;

column_description ::= IDENT:e1 type_description:e2
                      {: RESULT = new ColumnDescriptionNode(e1, e2); :}
                      ;

type_description ::= IDENT:e1
                     {: RESULT = new TypeDescriptionNode(e1); :}
                     |
                     IDENT:e1 LEFTPAR:e2 INTEGER_LITERAL:e3 RIGHTPAR:e4
                     {: RESULT = new TypeDescriptionNode(e1, e3); :}
                     ;

empty ::= ;
